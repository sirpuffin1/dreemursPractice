datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    username       String?   @default("usey")
    email          String    @unique
    emailVerified  DateTime?
    hashedPassword String?
    accounts       Account[]
    sessions       Session[]
    posts          Posts[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Posts {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    transcription String
    author        User?  @relation(fields: [authorId], references: [id])
    authorId      String @db.ObjectId // relation scalar field (used in the `@relation` attribute above)
    createdAt     DateTime @default(now())
    audioUrl      String
}
